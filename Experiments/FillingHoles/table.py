import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Дані для таблиці
data = {
    "Метрика": ["SSIM", "Час виконання (мс)", "Використання CPU (%)", "Використання RAM (MB)", "Кількість задіяних ядер"],
    "Заповнення артефактів середнім кольором з сусідів у артефакта": [
        "0.7537 - 0.7537", "4626.39 - 4705.30", "5.15 - 5.51", "1724.24 - 1833.26", "1.03 - 1.10"
    ],
    "Заповнення артефактів середнім кольором з фотографії": ["0.7017 - 0.7017", "3601.92 - 3674.76", "4.96 - 5.57", "1561.85 - 1666.58", "0.99 - 1.11"],
    "Заповнення артефактів методом inpainting (Telea)": ["0.7535 - 0.7535", "4004.08 - 4100.37", "4.96 - 5.77", "1663.54 - 1767.74", "0.99 - 1.15"],
    "Заповнення артефактів методом inpainting (Navier-Stokes)": ["0.7533 - 0.7533", "3764.36 - 3835.40", "5.05 - 5.67", "1607.95 - 1712.70", "1.01 - 1.13"],
    "Заповнення артефактів методом Gaussian Weighted Blending": [
        "0.7527 - 0.7527", "6432.53 - 6479.11", "5.00 - 5.47", "1705.51 - 1816.13", "1.00 - 1.05"
    ]
}

# Оновлені числові дані для нормалізації
numeric_data = {
    "Метрика": ["SSIM", "Час виконання (мс)", "Використання CPU (%)", "Використання RAM (MB)", "Кількість задіяних ядер"],
    "Заповнення артефактів середнім кольором з сусідів у артефакта": [0.7537, 4665.53, 5.38, 1807.12, 1.08],
    "Заповнення артефактів середнім кольором з фотографії": [0.7017, 3601.92, 4.96, 1561.85, 0.99],
    "Заповнення артефактів методом inpainting (Telea)": [0.7535, 4004.08, 4.96, 1663.54, 0.99],
    "Заповнення артефактів методом inpainting (Navier-Stokes)": [0.7533, 3764.36, 5.05, 1607.95, 1.01],
    "Заповнення артефактів методом Gaussian Weighted Blending": [0.7527, 6450.97, 5.17, 1790.20, 1.03]
}

df = pd.DataFrame(data)
numeric_df = pd.DataFrame(numeric_data)

# Нормалізація числових значень окремо для кожної метрики
normalized_data = numeric_df.iloc[:, 1:].copy()

# Інверсія для метрики SSIM (чим більше, тим краще)
normalized_data.loc[0, :] = 1 - (numeric_df.iloc[0, 1:] - numeric_df.iloc[0, 1:].min()) / (
        numeric_df.iloc[0, 1:].max() - numeric_df.iloc[0, 1:].min())

# Нормалізація для решти метрик (чим менше, тим краще)
for i in range(1, normalized_data.shape[0]):
    normalized_data.iloc[i, :] = (numeric_df.iloc[i, 1:] - numeric_df.iloc[i, 1:].min()) / (
            numeric_df.iloc[i, 1:].max() - numeric_df.iloc[i, 1:].min())

# Візуалізація таблиці з градієнтами
fig, ax = plt.subplots(figsize=(12, 6))
sns.heatmap(
    normalized_data.astype(float),
    annot=df.iloc[:, 1:],  # Текст з оригінальними значеннями
    fmt="",
    cmap="RdYlGn_r",  # Палітра червоний-оранжевий-зелений
    cbar_kws={'label': 'Нормалізовані значення'},
    linewidths=0.5,
    ax=ax
)

# Налаштування осей
ax.set_yticklabels(df["Метрика"], rotation=0, fontsize=10)
ax.set_xticklabels(df.columns[1:], rotation=30, ha="right", fontsize=10)
plt.title("Порівняння методів заповнення артефактів", fontsize=12)

# Показ таблиці
plt.tight_layout()
plt.show()
